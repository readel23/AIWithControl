from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image
import torch
import cv2
import time
import mss


class ImageDescriber:
    def __init__(self, model_name="Salesforce/blip-image-captioning-base", use_cuda=True, show_image=True):
        self.device = torch.device("cuda" if torch.cuda.is_available() and use_cuda else "cpu")
        self.show_image = show_image
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –Ω–∞ {self.device}...")

        self.processor = BlipProcessor.from_pretrained(model_name)
        self.model = BlipForConditionalGeneration.from_pretrained(model_name).to(self.device)

    def describe(self, verbose=True):
        """
        –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
        """
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            return "üö´ –ö–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–∏–Ω–≥—É–π –µ—ë –æ—Ç–≤–µ—Ä—Ç–∫–æ–π –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏."

        ret, frame = cap.read()
        cap.release()

        if not ret:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä. –ö–∞–º–µ—Ä–∞ ‚Äî —á–∏—Å—Ç–æ –Ω–æ–ª—å –±–µ–∑ –ø–∞–ª–æ—á–∫–∏."

        start_time = time.time()

        img_pil = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)).convert("RGB")
        inputs = self.processor(images=img_pil, return_tensors="pt").to(self.device)
        out = self.model.generate(**inputs, max_new_tokens=50)
        caption = self.processor.decode(out[0], skip_special_tokens=True)

        duration = time.time() - start_time
        if verbose:
            print(f"üïí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {duration:.2f} —Å–µ–∫")

        return f"üì∑ –ù–∞ —Ñ–æ—Ç–æ: {caption}"
    def get_screenshot():
        with mss.mss() as sct:
            screenshot = sct.grab(sct.monitors[1])  # [1] ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
            img = Image.frombytes("RGB", screenshot.size, screenshot.rgb)
            return img
