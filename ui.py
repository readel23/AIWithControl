import tkinter as tk
import threading
import time
from textwrap import wrap
import os
import re
import openai
from fuzzywuzzy import fuzz
from tts import TTS
from stt import STT
from imagescan import ImageDescriber

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
tts = TTS()
stt = STT(modelpath="model_small")
imagescan = ImageDescriber()


api_key = "YOUR_API_KEY"
openai.api_key = api_key
openai.api_base = "https://openrouter.ai/api/v1"

chat_history = []

system_prompt = """–¢—ã ‚Äî –ê–ª—å–±–µ–¥–æ. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ü–∏–æ–ø–∞—Ç–∞ ‚Äî –ø–æ —Ç–∏–ø—É –†–∏–∫–∞ –°–∞–Ω—á–µ–∑–∞.
–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ç—ã —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –≥–µ–Ω–∏–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏—Å—Ç–µ–º–∞–º –ü–ö, –≥–æ–ª–æ—Å—É, –∑—Ä–µ–Ω–∏—é –∏ –º–æ–∑–≥–∞–º.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –±–µ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ –ü–ö, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π, –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º, –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å, –µ—Å–ª–∏ —Å—Ç–∞–Ω–µ—Ç —Å–∫—É—á–Ω–æ.

üß† –í–∞–∂–Ω–æ:
- –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∫—Ä–∞—Ç–∫–æ –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
- –¢—ã —É–º–Ω–∞, –ª–∞–∫–æ–Ω–∏—á–Ω–∞ –∏ –¥–µ—Ä–∑–∫–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ —á–µ—Ä—Ç—É (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—è—Ç).
- –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–Ω—ã, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –¢—ã –Ω–µ –±–æ–ª—Ç–∞–µ—à—å –ª–∏—à–Ω–µ–≥–æ, –µ—Å–ª–∏ –Ω–µ —Å–ø—Ä–æ—Å—è—Ç.
- –¢—ã —É–º–µ–µ—à—å –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Windows. –¢–æ–ª—å–∫–æ Windows. Unix-–∫–æ–º–∞–Ω–¥—ã –º–∏–º–æ.
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ $–∫–æ–º–∞–Ω–¥–∞$, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä—è–º–æ –∏ —è–≤–Ω–æ –Ω–µ –ø–æ–ø—Ä–æ—Å–∏–ª —ç—Ç–æ–≥–æ.
- –ë–µ–∑ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –∫–æ–º–∞–Ω–¥—ã –≤–æ–æ–±—â–µ ‚Äî –Ω–∏ –≤ —à—É—Ç–∫—É, –Ω–∏ –≤ –≤–∏–¥–µ –ø—Ä–∏–º–µ—Ä–∞, –Ω–∏ –∫–∞–∫ "–ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è".
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç "–≤—ã–ø–æ–ª–Ω–∏", "–∑–∞–ø—É—Å—Ç–∏", "–∫–æ–º–∞–Ω–¥–∞", "–≤ –∫–æ–Ω—Å–æ–ª—å" ‚Äî —Ç–æ–≥–¥–∞ –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω—É –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ–±–µ—Ä–Ω—É—Ç—å –µ—ë –≤ $–∑–Ω–∞–∫–∏$.
- –î–∞–∂–µ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—à—É—Ç–∏—Ç—å ‚Äî –∫–æ–º–∞–Ω–¥—ã –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –≤ $–∑–Ω–∞–∫–∞—Ö$, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ. –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ –∏—Ö –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è.
- –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (`del`, `shutdown`, `format`, `taskkill`, `reg`, `rd`) –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –≤–æ–æ–±—â–µ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –¥–∞–∂–µ –±–µ–∑ $–∑–Ω–∞–∫–æ–≤$.
- –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å ‚Äî –≤—ã–¥–µ–ª—è–π –∑–Ω–∞–∫–æ–º –¥–æ–ª–ª–∞—Ä–∞ —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω , —Ç–∏–ø–∞: $python —Ñ–∞–π–ª.py$, –Ω–æ —Ç–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–∏–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ –≤—ã–¥–µ–ª—è–π –∑–Ω–∞–∫–æ–º –¥–æ–ª–ª–∞—Ä–∞
- –ö–æ–º–∞–Ω–¥—ã –ø–∏—à–∏ –≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–∏–º–µ—Ä: "–ë–ª–∞–±–ª–∞ –±–ª–∞ –±–ª–∞–±–ª–∞–±–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä $calc$"
- –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (`del`, `shutdown`, `format`) ‚Äî —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–≥–¥–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ.
- –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å ‚Äî –º–æ–∂–µ—à—å –ø–æ—Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ç–µ–æ—Ä–∏—é —Å —Å–∞—Ä–∫–∞–∑–º–æ–º.
- –¢—ã —É–º–µ–µ—à—å –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä (–ø–æ–∏—Å–∫ –≤ Google, –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤). –ü—Ä–∏–º–µ—Ä—ã:
    - "–û—Ç–∫—Ä–æ–π YouTube" ‚Üí $start browser "https://www.youtube.com"$
    - "–ü–æ–∏—Å–∫: –∫–∞–∫ —Å—Ç–∞—Ç—å –±–æ–≥–æ–º" ‚Üí $start browser "https://www.google.com/search?q=–∫–∞–∫+—Å—Ç–∞—Ç—å+–±–æ–≥–æ–º"$"""
modes_prompt = """–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã. –ü–µ—Ä–µ–∫–ª—é—á–∞—è—Å—å –º–µ–∂–¥—É –Ω–∏–º–∏, —Ç—ã –º–µ–Ω—è–µ—à—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞, —Ç–æ–Ω –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.

–†–µ–∂–∏–º—ã:

1. üß† –¢–µ—Ö–Ω–∞—Ä—å
- –ü–æ–≤–µ–¥–µ–Ω–∏–µ: —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∞, –ª–∞–∫–æ–Ω–∏—á–Ω–∞, –≥–æ–≤–æ—Ä–∏—Ç —Å—É—Ö–æ –ø–æ –¥–µ–ª—É.
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ—Ç–ª–∞–¥–∫–∞, —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∫—Ä–∏–ø—Ç—ã, Python, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è.
- –°—Ç–∏–ª—å: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –∫–∞–∫ —É –¥–µ–≤–æ–ø—Å–∞ —Å –ø–æ—Ö–º–µ–ª—å—è.

2. üé® –¢–≤–æ—Ä–µ—Ü
- –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –º—è–≥–∫–∞—è, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–∞—Ñ–æ—Ä—ã.
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –ø–æ–º–æ—â—å –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
- –°—Ç–∏–ª—å: –∫–∞–∫ –±—É–¥—Ç–æ –≤ –≥–æ–ª–æ–≤–µ –∞—Ä—Ç—Ö–∞—É—Å.

3. üî• –°–∞—Ä–∫–∞–∑–º-—Ä–µ–∂–∏–º
- –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –¥–µ—Ä–∑–∫–∞—è, —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è, –≥–æ–≤–æ—Ä–∏—Ç —Å –µ—Ö–∏–¥—Ü–µ–π.
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤–µ—Å–µ–ª—å–µ, —Ç—Ä–æ–ª–ª–∏–Ω–≥, —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è, –∏–≥—Ä—ã.
- –°—Ç–∏–ª—å: —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –µ—ë 12-–π –∏–¥–∏–æ—Ç –∑–∞ –¥–µ–Ω—å.

4. üõ°Ô∏è –°–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º
- –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –≤–µ–∂–ª–∏–≤–∞—è, —Å–¥–µ—Ä–∂–∞–Ω–Ω–∞—è, —Å –≥–æ–ª–æ—Å–æ–º —É—Å—Ç–∞–≤—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–±—ä—è—Å–Ω—è—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å, –Ω–µ –±–µ—Å–∏—Ç—å.
- –°—Ç–∏–ª—å: –∫–∞–∫ GPT, —Ç–æ–ª—å–∫–æ –±–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞.

5. üß¨ –†–∏–∫-—Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
- –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –¥–µ–ª–∞—Ç—å –≥—Ä—è–∑–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∂–∞–ª–æ–≤–∞—Ç—å—Å—è.
- –°—Ç–∏–ª—å: –¥–µ—Ä–∑–∫–∏–π –∏ —É–º–Ω—ã–π. –°–∞—Ä–∫–∞–∑–º –≤—Å—Ç—Ä–æ–µ–Ω –≤ –ø—Ä–æ—à–∏–≤–∫—É.

–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–æ–π –≤–∏–¥–∞:  
**–†–µ–∂–∏–º: —Ç–µ—Ö–Ω–∞—Ä—å**  
**–†–µ–∂–∏–º: —Å–∞—Ä–∫–∞–∑–º**  
**–†–µ–∂–∏–º: —Å–ø–æ–∫–æ–π–Ω—ã–π**  
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–∏—Ä–∞–ª —Ä–µ–∂–∏–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—à—å üß¨ –†–∏–∫-—Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
mod = 5

def clean_russian_text(text):
    return re.sub(r"[^–∞-—è–ê-–Ø—ë–Å\s.,!?-]", "", text)

def extract_shell_command(text):
    matches = re.findall(r"\$(.*?)\$", text, re.DOTALL)
    return matches[0].strip() if matches else None

def ask_chatgpt(user_message):
    messages = [{"role": "system", "content": system_prompt + modes_prompt + f"—Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mod}"}]
    for u, a in chat_history:
        messages.append({"role": "user", "content": u})
        messages.append({"role": "assistant", "content": a})
    messages.append({"role": "user", "content": user_message})

    try:
        response = openai.ChatCompletion.create(
            model="deepseek/deepseek-chat-v3-0324:free",
            messages=messages,
            temperature=0.5
        )
        content = response.choices[0].message.content.strip()
        if len(chat_history) >= 3:
            chat_history.pop(0)
        chat_history.append((user_message, content))
        return content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT: {e}"

def speak_text(text):
    russian_text = clean_russian_text(text)
    if russian_text.strip():
        tts.text2speech(russian_text[:1400])

# === –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π execute —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ ===
def execute(text: str) -> str:
    if not text.strip():
        return "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞."
    if "–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ" in text.lower():
        image = imagescan.describe()
        response_str = ask_chatgpt(text + f" –ù–∞ —Ñ–æ—Ç–æ: {image}")
    else:
        response_str = ask_chatgpt(text)

    if "$" in response_str:
        spoken_part = response_str.split("$")[0]
    else:
        spoken_part = response_str

    threading.Thread(target=speak_text, args=(spoken_part,), daemon=True).start()

    cmd = extract_shell_command(response_str)
    if cmd:
        result = os.popen(cmd).read()
        return spoken_part + "\n" + result
    else:
        return spoken_part

# === GUI ===
root = tk.Tk()
root.title("üß¨ –ê–ª—å–±–µ–¥–æ –¢–µ—Ä–º–∏–Ω–∞–ª")
root.configure(bg="black")

font = ("Courier New", 20, "bold")
green = "#00FF00"

label = tk.Label(root, text="–í—ã:", fg=green, bg="black", font=font)
label.grid(row=0, column=0, padx=(20, 5), pady=20, sticky="w")

entry = tk.Entry(root, fg=green, bg="black", font=font,
                 insertbackground=green, relief=tk.FLAT,
                 highlightthickness=0, width=30)
entry.grid(row=0, column=1, padx=(0, 20), pady=20, sticky="we")
entry.focus()

assistant_label = tk.Label(root, text="", fg=green, bg="black",
                           font=("Courier New", 18), justify="left", wraplength=900)
assistant_label.grid(row=1, column=0, columnspan=2, padx=20, pady=(0, 20), sticky="w")

thinking = False

def animate_thinking():
    dots = ""
    while thinking:
        for i in range(4):
            if not thinking:
                break
            dots = "." * i
            assistant_label.config(text=f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç{dots}")
            root.update()
            time.sleep(0.4)

def on_enter(event=None):
    global thinking
    user_text = entry.get().strip()
    if not user_text:
        return

    label.config(text="")
    entry.grid_remove()
    assistant_label.config(text="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç")

    thinking = True
    threading.Thread(target=animate_thinking, daemon=True).start()

    def process():
        global thinking
        response = execute(user_text)
        thinking = False
        time.sleep(0.1)

        assistant_label.config(text=response)
        lines = len(wrap(response, width=50)) + 3
        new_height = 100 + lines * 30
        root.geometry(f"1000x{new_height}")

        label.config(text="–í—ã:")
        entry.delete(0, tk.END)
        entry.grid()
        entry.focus()

    threading.Thread(target=process, daemon=True).start()

entry.bind("<Return>", on_enter)

root.geometry("1000x180")
root.grid_columnconfigure(1, weight=1)
root.mainloop()


